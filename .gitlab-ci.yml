---
stages:
  - validate
  - release

default:
  image: alpine:latest
  before_script: &default_before_script
    - apk -U upgrade

variables:
  GIT_SUBMODULE_STRATEGY: recursive

lint:
  stage: validate
  variables:
    PRE_COMMIT_HOME: $CI_PROJECT_DIR/.cache/pre-commit
  before_script:
    - *default_before_script
    - apk --no-cache add bash git go grep npm py-pip python3-dev shellcheck shfmt
    - pip install pre-commit
    - npm install -g markdownlint-cli
  script:
    - |
      if [ -z "${GL_TOKEN:-}" ]; then
          SKIP=gitlab-ci-linter pre-commit run -a --hook-stage manual
      else
          GITLAB_PRIVATE_TOKEN="$GL_TOKEN" pre-commit run -a --hook-stage manual
      fi
  cache:
    paths:
      - $PRE_COMMIT_HOME
    when: always
  interruptible: true
  rules:
    - when: always

test-full:
  stage: validate
  before_script:
    - *default_before_script
    - apk --no-cache add bats grep
  script:
    - scripts/test full
  interruptible: true
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"

test-nightly:
  stage: validate
  before_script:
    - *default_before_script
    - apk --no-cache add bats grep
  script:
    - scripts/test nightly
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"

release:
  stage: release
  image:
    name: node:latest
    entrypoint: [""]
  before_script:
    - apt-get update && apt-get upgrade -y
    - npm install -g semantic-release @semantic-release/gitlab @semantic-release/git @semantic-release/changelog @semantic-release/exec
  script:
    - npx semantic-release
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(((0|[1-9]\d*)\.)(((0|[1-9]\d*|x)\.)?x)|main|next(-major)?|beta|alpha)$/ && $CI_PIPELINE_SOURCE != "schedule"
  resource_group: release
